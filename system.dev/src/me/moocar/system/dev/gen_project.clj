(ns me.moocar.system.dev.gen-project
  "Generate the project.clj file for this project."
  (:require [clojure.java.io :as io]
            [clojure.string :as string]
            [clojure.pprint :refer [pprint]])
  (:import (java.io File PushbackReader PrintWriter)))

;;; Constants for configuration

(def omit-dirs
  "Set of directory names to skip when assembling the project list.
  These directories will not be scanned for project.clj files or
  source files."
  #{"system.dev"})

(def local-dependencies
  "Additional dependencies to add to the list of dependencies
  generated by scanning other projects."
  '[[org.clojure/java.classpath "0.2.2"]

    ;; Other tools depend on clj-stacktrace; use latest to avoid
    ;; NullPointerException
    [clj-stacktrace "0.2.8"]

    ;; Need latest version of core.cache to resolve dependency
    ;; conflict with cemerick/friend
    [org.clojure/core.cache "0.6.3"]])

;;; Finding projects

(defn- omit-dir? [^File file]
  (contains? omit-dirs (.getName file)))

(defn- hidden-file? [^File file]
  (.startsWith "." (.getName file)))

(defn- omit? [^File f]
  (or (hidden-file? f)
      (omit-dir? f)))

(defn- file-seq-projects
  "A tree seq on java.io.Files which ignores hidden files (filenames
  beginning with a dot), and specifically omitted directories."
  [dir]
  (tree-seq
   (fn [^File f]
     (and (.isDirectory f)
          (not (omit? f))))
   (fn [^File d]
     (remove omit? (.listFiles d)))
   dir))

(defn- project-files [root-dir]
  (filter #(= "project.clj" (.getName ^File %))
          (file-seq-projects (io/file root-dir))))

(defn- project-dirs [root-dir]
  (map #(.getParentFile ^File %) (project-files root-dir)))

;;; Parsing dependencies from project.clj

(defn- read-defproject [file]
  (with-open [stream (PushbackReader. (io/reader file))]
    (loop []
      (when-let [form (read stream false nil)]
        (if (and (list? form)
                 (= 'defproject (first form)))
          form
          (recur))))))

(defn- project-map [defproject-form]
  (let [[_ name version & keyvals] defproject-form]
    (assoc (apply hash-map keyvals)
      :name name
      :version version)))

(defn- all-dependencies [project-map]
  (into (:dependencies project-map)
        (get-in project-map [:profiles :dev :dependencies])))

(defn- project-file [project-dir]
  (io/file project-dir "project.clj"))

(defn- all-dependencies-from-project-dir [project-dir]
  (-> project-dir
      project-file
      read-defproject
      project-map
      all-dependencies))

;;; Generating the combined project.clj

(defn- long-or-string [^String string]
  (try (Long. string)
       (catch NumberFormatException _ string)))

(defn split-version [s]
  (-> s
      (string/replace #"(?<=alpha|beta|RC)(?=\d)" ".")
      (string/split #"[-._]")
      (->> (mapv long-or-string))))

(defn compare-versions [a b]
  (compare (split-version a) (split-version b)))

(defn- latest-versions [dependencies]
  (mapv (fn [[sym dependencies]]
          (last (sort compare-versions dependencies)))
        (group-by first dependencies)))

(defn- all-dependencies-in-projects [projects]
  (->> projects
       (mapcat all-dependencies-from-project-dir)
       latest-versions
       sort
       vec))

(defn- relative-dir-string [local-dir ^File dir]
  (let [local-path (.toPath (io/file local-dir))
        path (.toPath dir)]
    (str (.relativize local-path path))))

(defn- all-project-paths [dir-names local-dir projects]
  (->> projects
       (mapcat (fn [project-dir]
                 (map #(io/file project-dir %) dir-names)))
       (filter #(.exists ^File %))
       (map #(relative-dir-string local-dir %))
       sort))

(defn- project-clj-data [local-dir projects]
  (list 'defproject
        'me.moocar/system.dev
        "0.1.0-SNAPSHOT"
        :aliases (sorted-map
                  "gen-project" ["run" "-m" "me.moocar.system.dev.gen-project"])
        :profiles {:dev {:source-paths ["dev"]}}
        :dependencies
        (into local-dependencies
              (all-dependencies-in-projects projects))
        :source-paths
        (into ["src"]
              (all-project-paths ["src"] local-dir projects))
        :resource-paths
        (into ["resources"]
              (all-project-paths ["resources" "dev-resources" "test-resources"]
                                 local-dir
                                 projects))
        :test-paths
        (into ["test"]
              (all-project-paths ["test"]
                                 local-dir projects))
        :jvm-opts ["-Xmx1g" "-XX:MaxPermSize=256m"]))

(defn- write-project-file [file content]
  (with-open [writer (io/writer file)]
    (binding [*out* (PrintWriter. writer)]
      (println ";; This file was generated by me.moocar.system.dev.gen-project.")
      (println ";; Do not edit by hand.")
      (pprint content))))

(defn- ^File current-dir []
  (io/file (System/getProperty "user.dir")))

(defn- root-dir []
  (.getParentFile (current-dir)))

;;; Main entry points

(defn gen-project
  "Searches the me.moocar.ftb500 project for sub-projects, finds
  their dependencies and source directories, then generates and
  OVERWRITES the project.clj for system.dev (this project)."
  []
  (->> (project-dirs (root-dir))
       (project-clj-data (current-dir))
       (write-project-file (io/file (current-dir) "project.clj"))))

(defn -main [& _]
  (gen-project))
